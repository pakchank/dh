# 강의 사전 준비 {#appendix-install}

본 튜토리얼에서는 강의를 듣기 앞서 필수적으로 이루어져야 하는 사전 준비작업들을 설명합니다. 수강자분들께서는 수강 전에 **반드시** 여기서 설명된 준비 작업을 수행하시고, 강의에 참여해주시기 바랍니다. 한정된 강의 시간과 수강생의 수를 고려할 때 강의 중 아래 준비작업에 도움을 드리기는 어렵다는 점 기억해 주시기 바랍니다. `R`을 이용해 본 경험이 있는 분들은 아래 체크리스트를 살펴 보시고 아직 이루어지지 않은 부분만 실행하시면 되겠습니다.

### 체크리스트 (강의 수강 전 **반드시** 완료)

-   R 설치
-   Rtools 설치 (윈도우즈 이용자만)
-   Rstudio 설치
-   tidyverse 등 패키지 설치
-   KoNLP 설치
-   ETRI AI API 받기
-   KODDAS API 작동 체크
-   [사전 설문조사 참여](https://forms.gle/f836zwwofUTnk5tX8)

만약, 위의 사전 작업을 수행하시는 중에 해결이 안 되는 부분이 있다면, 다음 오픈채팅방을 이용해서 질문해주시기 바랍니다. 다만, 튜토리얼을 상세히 읽고, 혼자 최대한 시도를 해 보고 질문을 해 주실 것을 부탁드립니다. 오픈채팅 방은 강의 중에도 사용될 예정이나, 모두 가입해주시면 감사하겠습니다.

> [**오픈 카톡**](https://open.kakao.com/o/gHSo3K8g)

또한, 당일 원활한 워크샵 진행을 위해 사전 설문조사를 꼭 작성해 주시기 바랍니다. 참여자 분들이 이미 익숙한 내용에 대한 반복을 피하고, 가능한 모두에게 유용한 내용의 워크샵이 될 수 있도록 준비하기 위함입니다.

> [**사전 설문조사**](https://forms.gle/f836zwwofUTnk5tX8)

가장 먼저 본 워크샵의 작업 환경에 해당하는 `R`과 `Rstudio`의 설치법을 설명합니다. 실제로 이용하는 언어는 R이지만, R 그 자체는 편리한 사용성을 제공하지 못합니다. 하지만, `R`이 이미 설치되어 있다면, `Rstudio`를 통해서 훨씬 편하고 세련된 환경에서 코딩을 할 수 있을 뿐만 아니라 `R` 자체로는 구현할 수 없는 중요한 추가적인 기능들--홈페이지 제작, 인터렉티브 시각화 등--을 활욯할 수 있게 됩니다. 따라서, 본 교재의 학습을 위해서는 `R`과 `Rstudio` 모두를 설치해야 합니다.

## R 설치

R을 설치하기 위해서는 [R다운로드 페이지](https://cran.yu.ac.kr/)로 이동해야 합니다.

![R 다운로드 페이지](img/download.png)

여기에서 사용하는 운영체제에 맞추어 링크를 선택합니다. 여기서는 윈도우즈 사용환경을 가정하고 '[Download R for Windows](https://cran.yu.ac.kr/bin/windows/)'를 클릭합니다 (물론 맥 이용자나 리눅스 이용자라면 다른 옵션을 선택하시면 됩니다). 그러면 다음과 같은 화면이 나타날 것입니다.

![윈도우즈 사용자를 위한 R 다운로드](img/windows.png) 윈도우즈 이용자들은 두 가지를 설치해야 합니다. 하나는 'base'라고 표시되어 있는 R프로그램 그 자체입니다. 해당 하이퍼링크를 클릭하면 이동하는 페이지에 'Download R-4.4.2 for Windows'라고 표시된 하이퍼링크가 있을 것입니다 (4.4.2이라는 버전을 나타내는 숫자는 최신 업데이트에 따라 달라질 수 있습니다). 이를 클릭하면 다음 설치 파일이 다운로드 됩니다.

두번째로 다운로드 받을 파일은 위의 화면 캡춰에서 `Rtools`라고 표시되어 있는 R의 확장 프로그램 입니다. 이 역시 R의 다양한 기능을 활용하기 위해서 반드시 필요합니다. 해당 링크를 클릭하여 앞서 다운 받은 R 버전에 맞는 RTools를 다운받습니다. 예컨대 앞서 R 4.4.0버전을 다운 받았으니, 'RTools 4.4'을 다운받는 것이지요.

::: callout-note
윈도우즈 사용자는 반드시 `R`과 `RTools` 모두를 설치해야 합니다. `RTools`를 설치하지 않은 경우, 뒤에서 설명할 여러 패키지 설치 과정이 작동하지 않을 수 있습니다.

단, **맥 사용자는 R만 설치하면 됩니다.**
:::

이제 두 설치파일을 다운로드 받은 순서대로 더블클릭하여 설치를 완료하면 됩니다. 여기서도, 한 가지 주의사항이 있습니다. R은 오픈소스 언어이기 때문에, 상업 프로그램처럼 다양한 언어를 부드럽게 처리하지못하는 경우가 있습니다. 관련해서 가장 많은 에러를 양산하는 문제 중 하나가 R이 설치된 경로상에 한글이 섞여 있는 경우 입니다. 예컨대, 윈도우즈의 이용자 이름이 자신의 이름으로 되어 있다면, 설치경로가 에러를 만들어 내는 경우가 많습니다. 예컨대, "C:\Users\박찬경\R-4.4.2"과 같은 주소는 한글이 포함되어 좋지 않다는 이야기 입니다. "C:\Program Files\R-4.4.2"과 같은 설치 경로는 한글이 포함되어 있지 않으므로, 문제가 없습니다. 따라서, 윈도우즈 이용자 이름에 알파벳이 아닌 다른 문자가 섞여 있다면, `R` 설치시 설정하는 모든 경로를 이용자 이름이 섞이지 않도록 적절하게 수정해 주는 것이 좋습니다.

::: callout-note
`R` 설치 경로는 알파벳만으로 이루어지도록 주의하세요.
:::

## Rstudio 설치

Rstudio는 오픈소스 프로젝트가 아니라 사기업인 Posit에 의해 관리되기 때문에 다운로드 및 설치가 더욱 쉽습니다. [다음 링크](https://posit.co/download/rstudio-desktop/)를 따라가서, 각자의 운영체제에 맞는 설치파일을 다운 받은 후 실행해 주면 됩니다. 다만, `Rstuio`의 설치는 `R` 설치가 모두 완료된 다음 해 주는 것이 불필요한 에러를 방지할 수 있습니다.

![Rstudio 다운로드 페이지](img/rstudio_install.png)

## R과 Rstudio 처음 이용하기

먼저, R은 윈도우 시작 버튼을 눌러 실행할 수 있습니다. 시작 화면에서 전체 애플리케이션을 열면, 여러분의 컴퓨터에 설치된R은 보통 다음과 같이 나타납니다.

![윈도우즈에서 R 실행하기](img/R_start.png){width="50%"}

제 경우에는 여러 버전의 R을 설치하다보니 여러 가지의 R이 보이는데요, 그 중에서 버전이 가장 높은 것을 선택하시면 됩니다. i386과 x64는 여러분이 사용하는 컴퓨터의 환경과 관련이 있는데, 대부분의 요즘 컴퓨터는 x64라고 생각하시면 됩니다. 따라서 위의 경우에는 `R x64 4.1.3`을 선택하면 되겠네요. 이를 실행하면 다음과 같은 화면이 나타나게 됩니다.

![R 화면](img/R_gui.png)

화면에 가장 크게 보이는 하얀 창이 바로 R의 핵심인 콘솔(Console) 입니다. 여기에 이러저러한 명령을 하고 엔터를 치면 R은 해당 명령을 수행한 결과를 표시해 줍니다. R을 사용하는 가장 단순한 방법은 계산기 처럼 활용하는 것입니다. 예컨대 2+1이라는 연산을 한다고 해 볼까요? 그 때는 가장 단순하게 다음과 2+1이라고 콘솔에 쓰시고 엔터키를 치면 됩니다. 그러면 다음과 같은 결과를 볼 것입니다.

```{r}
2+1
```

물론, 여러분이 나중에 작성하게될 코드는 이보다 복잡할 것입니다. 그렇다면 코드를 한줄 쓰고 실행하는 이런 단순한 방식은 아무래도 불편할 것입니다. 따라서, 대부분의 이용자들은 위와 같은 화면에서 `R`을 사용하지 않습니다. 대신 `Rstudio`라는 환경을 사용하지요.

여러분 컴퓨터에 설치된 Rstudio를 사용하는 가장 간단한 방법은 윈도우즈 화면 하단 시작 버튼 옆의 검색창에 'Rstudio'라고 검색해 보는 것입니다. `Rstudio`가 올바르게 설치되어 있다면, 다음과 유사한 화면을 보게 될 것입니다.

![Rstudio 시작](img/rstudio_start.png){width="60%"}

이제 Rstudio를 선택해서 프로그램을 실행시키면 다음과 같은 화면이 나타납니다.

![Rstudio 첫 화면](img/rstudio.png)

바탕화면은 초기설정에 따라 위와 같이 어두운 색이기도, 밝은 색이기도 합니다. `Rstudio`는 `R`을 편리하게 사용할 수 있도록 도와줄 뿐만 아니라, `R`의 더 많은 기능을 이끌어내기 위해 만들어낸 인터페이스라고 생각하시면 됩니다. 전문적인 용어로는 통합개발환경(IDE)라고 하지요. 비유하자면, `R`가 엔진이라면, `Rstudio`는 여러분이 직접 운전하는 자동차와 같은 관계라고 생각하시면 되겠습니다. 엔진을 이용해 직접 가능한 탈것을 만드는 사람은 극히 제한적이듯, 대부분의 사람들은 `Rstudio`를 사용하지, `R`을 직접 사용하지 않습니다. 따라서, 여러분들 역시 앞으로 Rstudio만을 사용하게 될 것입니다.

![R과 Rstudio 간의 관계](img/r_rstudio.png){width="60%"}

`Rstudio`의 초기 화면에 보이는 가장 큰 공간은 `R`의 콘솔 입니다. 앞서 `R`의 기본 인터페이스에서 본 콘솔과 같은 콘솔이지요. 따라서 앞서 했던 것처럼 `2+1`라고 치고 엔터를 치면 아까와 같은 결과가 나올 것입니다.

## 패키지 설치

`R`뿐만 아니라, 많은 다른 언어에서 '패키지'라고 하는 것은 쉽게 말하자면 유용한 함수들의 묶음을 의미합니다. 기본 `R`을 설계한 사람들이 `R`에 내장해두지는 않았지만, 특정 목적을 위해서는 유용함 도구들이 묶여서 '패키지'로 제공된다고 생각하면 되겠습니다. 비유하자면, 여러분들이 매일 사용하는 '카카오톡'이 `R`이라고 해 보죠. 카카오톡 안에는 기본적인 채팅 기능 안에도 수많은 다른 기능들이 있지요? 선물을 주고 받을 수도 있고, 음식을 주문할 수도 있고, 쇼핑을 할 수도 있습니다. 물론 모든 이용자들이 이 기능들을 모두 사용하지는 않지요. 하지만, 어떤 사람들은 자주 사용합니다. 이러한 세부 기능에 해당 하는 일종의 카카오톡 안의 '미니 프로그램'을 `R`에서는 패키지라고 부른다고 생각하면 되겠습니다.

![카카오 미니프로그램](img/kakaotalk_miniprogram.jpg){width="50%"}

`R`에서 패키지를 부르는 방법은 다음과 같습니다.

```{r}
library(stats)
```

`library()`는 괄호가 있으니, 패키지를 부르는 '함수'일 것이고, 괄호 안에는 부르고 싶은 패키지의 이름을 **따옴표 없이** 쓰면 됩니다. 여기서는 `R`을 설치할 때 같이 설치되는 `stats`라는 패키지를 불렀습니다.

![패키지 종류](img/package.png)

그런데 `R`이 설치될 때 모든 패키지가 함께 설치되는 것은 아닙니다. 사실 그렇지 않은 패키지가 훨씬 많지요. 심지어 패키지는 여러분도 만들 수 있습니다. 그렇게 개인이 여러 목적으로 만든 비공식 패키지까지 포함한다면, 세상에는 무한히 많은 `R` 패키지들이 있습니다. 하지만, 우리가 자주 사용하게될 패키지는 `R`개발진들의 관리 감독 아래 있는 '공식' 패키지들입니다. 공식 패키지이지만, `R`과 함께 설치되지 않는 패키지를 설치하기 위해서는 다음과 같은 함수를 실행시키면 됩니다 (여기서는 따옴표가 필요합니다!).

```{r eval=FALSE}
install.packages("tidyverse")
```

물론, 설치만 한다고 해서 바로 이 패키지를 사용할 수 있는 것은 아닙니다. 아까 `stats` 패키지의 예에서처럼, `tidyverse` 패키지도 다음과 같이 불러주어야 합니다.

::: callout-note
패키지 이름을 따옴표로 감싸지 않으면, 패키지가 설치되지 않습니다.
:::

```{r, message=FALSE, warning=FALSE, eval=FALSE}
library(tidyverse)
```

이 함수를 실행시키면 `tidyverse`라는 패키지를 사용할 준비가 된 것입니다.

이 강의에서는 `tidyverse` 이외에도 다른 여러 패키지들을 사용할 예정입니다. 이 패키지들을 한 번에 설치하기 위해 다음과 같은 명령을 콘솔에서 실행시켜 주세요.

```{r eval=FALSE}
install.packages(c("tidyverse", "purrr", "tidytext", "tidygraph", "igraph",
                   "networkD3", "widyr", "ggraph", "readxl", "httr", "glue",
                   "jsonlite", "shiny", "showtext"))
```

### 패키지 사용시 주의사항: 설치? 로드?

방금 `tidyverse` 패키지를 설치하고 불러왔는데요, 여기서 패키지를 '설치'한다는 것과 '불러온다'는 것의 의미에 대해 잠깐 생각해볼 필요가 있습니다.

여러분이 일상적으로 윈도우 또는 맥OS 상에서 어떤 소프트웨어를 '설치'하면 그것은 어디에 저장되었다는 것을 의미하나요? 당연히 HDD, SSD와 같은 '저장장치' 입니다. 그래야, 컴퓨터를 껐다 다시 키더라도, 다시 '설치'할 필요가 없을테니까요. `tidyverse` 패키지를 설치했다는 것도 비슷한 의미입니다. 설치한 패키지는 저장장치 어디엔가 저장되어 있습니다.

> *따라서, 설치는 한 번 했다면 다시 할 필요가 없습니다.*

그런데 여러분 설치한 소프트웨어가 항상 켜져있나요? 물론 아닙니다. 그 소프트웨어를 실행시켜야지요. 실행시킨다는 것은 뭘까요? 여러 의미가 있지만, 가장 기본적으로는 저장장치에 설치되어 있는 해당 프로그램을 컴퓨터 메모리 상에 '불러온다'는 것입니다. 가끔 여러분들 너무 많은 소프트웨어를 동시에 열어두면 컴퓨터가 느려져서 몇몇 사용하지 않는 프로그램을 꺼야했던 경험이 있을 것입니다. 프로그램을 껐다는 것은 반대로 메모리에서 지운다는 것을 의미하겠지요. 따라서 메모리에 여유 공간을 조금 확보하려고 프로그램을 끄는 것입니다. 이렇게 프로그램을 켠다는 것은 `R` 패키지로 치면 패키지를 로드하는 과정과 유사합니다.

아까의 예에서처럼 `library(tidyverse)`라는 함수를 실행시키면, 저장장치에 저장되어 있던 `tidyverse` 패키지가 메모리로 불러와집니다. 그런데 메모리는 어떤 특성을 가지고 있었나요? 컴퓨터를 꺼도, 해당 정보에 할당된 이름이 사라져도, 메모리에서 언제든 사라질 수 있습니다. 이것은 무슨 이야기일까요? 여러분들이 `Rstudio`를 끄는 순간, 또는 `Rstudio` 안에서 다른 프로젝트로 이동하는 순간, 불러왔던 패키지는 메모리에 존재하지 않는 것이 됩니다. 그러니,

> 패키지를 불러오는 것은 `Rstudio`를 새로 켤 때마다, 또는 새로운 프로젝트로 이동할 때마다, 매번 다시 해야 합니다!

## KoNLP 설치

`KoNLP`는 한국어 자연어 처리를 `R` 패키지 입니다. 사실, KoNLP는 `R`이 아니라 `JAVA`라는 다른 언어에서 작동하는 패키지이고, `R`의 `KoNLP` 패키지는 `JAVA` `KoNLP`를 작동하기 위한 리모컨과 같은 역할을 합니다. 다른 말로는 'wrapper'라고 하지요. 이 때문에, `R`에서 `KoNLP`를 작동시키기 위해서는 `JAVA` 언어를 함께 설치해야 합니다. 또 하나 복잡한 문제는 `KoNLP`가 `R`의 공식 패키지가 아니라는 것입니다. 이러한 이유로 인해서 `KoNLP`의 설치 방식은 다소 복잡합니다. 그 중 가장 간단하다고 생각하는 설치 과정은 다음과 같습니다.

1.  `multilinguer' 패키지를 이용한`JAVA\` 설치.
2.  `KoNLP` 패키지 수동 설치.
3.  `Cli` 패키지 수동 설치.
4.  `scala-library-2.11.8.jar` 파일 다운로드.

자세한 설치 과정은 다른 분들이 이미 잘 작성해 둔 블로그 포스트들을 참조해주시기 바랍니다.

JAVA 설치는 다음 블로그를 참조해주세요.

https://e-datanews.tistory.com/155

나머지 2,3,4 단계 과정은 다음 포스트를 참조해주세요.

https://m.blog.naver.com/meta_com/223021590616

::: callout-note
윈도우즈 이용자들은 앞서 설치하기로 한 `RTools`를 설치하지 않았다면, 위의 과정은 잘 진행되지 않습니다.

많은 분들 컴퓨터에 이미 `JAVA`가 설치되어 있을 가능성이 높지만, 첫번째 블로그 포스트에서 안내하는대로, `multilinguer` 패키지의 `install_jdk()` 함수를 실행시켜주는 편이 오류의 가능성을 줄일 수 있습니다.
:::

모든 설치가 끝나면, 다음 명령어를 차례로 콘솔에서 실행 해 보세요.

```{r}
library(KoNLP)   # 패키지 이름에서 'o'는 소문자 입니다.
SimplePos22("KoNLP 설치를 성공적으로 완료하였습니다.")
```

이 코드가 에러 없이 실행되면, `KoNLP`가 잘 설치된 것입니다.

## NER NLP 받기

본 강의에서는 한국전자통신연구원에서 개발한 '개체명 인식' 분류기를 이용할 것입니다. 이는 트레이닝이 완료된 기계학습 모형이지만, 우리는 해당 기계학습 모형을 직접 각자의 컴퓨터에 로드하는 것이 아니라, 인터넷으로 우리가 가진 자연어 데이터를 ETRI로 전송하여 분류한 결과를 전송 받는 방식으로 작업할 예정입니다.

이를 위해서는 ETRI로부터 AI Open AI Key를 발급받아야 합니다. 이를 위해서는 다음 웹사이트를 방문하세요.

https://aiopen.etri.re.kr/keyMain

발급 신청이 완료된 후, ['API Key 확인'](https://aiopen.etri.re.kr/keyCheck) 메뉴에서 발급이 확인되면 API를 사용할 준비가 된 것입니다. API Key는 긴 문자열 형태인데, 이는 강의 전에 미리 복사해 사용할 수 있도록 준비해두기 바랍니다.

::: callout-note
미리 발급 받는 API 인증키를 워크샵에서 사용할 수 있도록 복사해 두세요.
:::

## KODDAS DB API 받기

강의 시간에 사용할 코리아 디아스포라 인터뷰 데이터 역시 경북대 사회과학연구원에서 제공하는 API를 통해서 다운 받아 사용할 에정입니다. 현재 API 키 발급 시스템이 개발 중에 있기 때문에, 수업용으로 미리 발급해둔 공동 키를 사용하겠습니다.

다음 명령어를 `R` 콘솔에서 차례로 실행시켜보았을 때 에러 없이 아래와 같은 결과가 얻어진다면, 준비가 완료된 것입니다.

```{r}
library(httr)
library(jsonlite)

res <- GET(url="https://koddas.knu.ac.kr/api/v1/statement",
           query=list(key="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImFwaXVzZXIiLCJpYXQiOjE3MzUyOTc0MDIsImV4cCI6MTc2NjgzMzQwMn0.q9upgIiYB6haOzc-aUUlwXk5qKvydFZtmDVzXarI1VI",
                      page=1,
                      limit="5",
                      bookNumber="28"))

dtString <- content(res, type="text", encoding="utf-8")

fromJSON(dtString)
```
